<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Mailing/Component.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Mailing;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use Civi\Core\Annotations\Field as Field;
use JMS\Serializer\Annotation as JMS;

/**
 * Component
 *
 * @CiviAPI\Entity("Component")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_mailing_component")
 * @ORM\Entity
 *
 */
class Component extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="name", type="string", length=64, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="component_type", type="string", length=12, nullable=true)
   * 
   */
  private $componentType;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="subject", type="string", length=255, nullable=true)
   * 
   */
  private $subject;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="body_html", type="text", length=65535, nullable=true)
   * 
   */
  private $bodyHtml;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="body_text", type="text", length=65535, nullable=true)
   * 
   */
  private $bodyText;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_default", type="boolean", nullable=true, options={"default": 0})
   * 
   */
  private $isDefault = '0';
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_active", type="boolean", nullable=true)
   * 
   */
  private $isActive;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set name
   *
   * @param string $name
   * @return Component
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set componentType
   *
   * @param string $componentType
   * @return Component
   */
  public function setComponentType($componentType) {
    $this->componentType = $componentType;
    return $this;
  }

  /**
   * Get componentType
   *
   * @return string
   */
  public function getComponentType() {
    return $this->componentType;
  }
  
  /**
   * Set subject
   *
   * @param string $subject
   * @return Component
   */
  public function setSubject($subject) {
    $this->subject = $subject;
    return $this;
  }

  /**
   * Get subject
   *
   * @return string
   */
  public function getSubject() {
    return $this->subject;
  }
  
  /**
   * Set bodyHtml
   *
   * @param text $bodyHtml
   * @return Component
   */
  public function setBodyHtml($bodyHtml) {
    $this->bodyHtml = $bodyHtml;
    return $this;
  }

  /**
   * Get bodyHtml
   *
   * @return text
   */
  public function getBodyHtml() {
    return $this->bodyHtml;
  }
  
  /**
   * Set bodyText
   *
   * @param text $bodyText
   * @return Component
   */
  public function setBodyText($bodyText) {
    $this->bodyText = $bodyText;
    return $this;
  }

  /**
   * Get bodyText
   *
   * @return text
   */
  public function getBodyText() {
    return $this->bodyText;
  }
  
  /**
   * Set isDefault
   *
   * @param boolean $isDefault
   * @return Component
   */
  public function setIsDefault($isDefault) {
    $this->isDefault = $isDefault;
    return $this;
  }

  /**
   * Get isDefault
   *
   * @return boolean
   */
  public function getIsDefault() {
    return $this->isDefault;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return Component
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
        'id' => array(
          'name' => 'id',
          'propertyName' => 'id',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Mailing Component ID'),
          'required' => true,
        ),
        'name' => array(
          'name' => 'name',
          'propertyName' => 'name',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Component Name'),
          'maxlength' => 64,
          'size' => \CRM_Utils_Type::BIG,
        ),
        'component_type' => array(
          'name' => 'component_type',
          'propertyName' => 'componentType',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Mailing Component Type'),
          'maxlength' => 12,
          'size' => \CRM_Utils_Type::TWELVE,
          'html' => array(
            'type' => 'Select',
          ),
          'pseudoconstant' => array(
            'callback' => 'CRM_Core_SelectValues::mailingComponents',
          )
        ),
        'subject' => array(
          'name' => 'subject',
          'propertyName' => 'subject',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Subject'),
          'maxlength' => 255,
          'size' => \CRM_Utils_Type::HUGE,
        ),
        'body_html' => array(
          'name' => 'body_html',
          'propertyName' => 'bodyHtml',
          'type' => \CRM_Utils_Type::T_TEXT,
          'title' => ts('Mailing Component Body HTML'),
          'maxlength' => 65535,
          'rows' => 8,
          'cols' => 80,
          'html' => array(
            'type' => 'TextArea',
          ),
        ),
        'body_text' => array(
          'name' => 'body_text',
          'propertyName' => 'bodyText',
          'type' => \CRM_Utils_Type::T_TEXT,
          'title' => ts('Body Text'),
          'maxlength' => 65535,
          'rows' => 8,
          'cols' => 80,
          'html' => array(
            'type' => 'TextArea',
          ),
        ),
        'is_default' => array(
          'name' => 'is_default',
          'propertyName' => 'isDefault',
          'type' => \CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Mailing Component is Default?'),
        ),
        'is_active' => array(
          'name' => 'is_active',
          'propertyName' => 'isActive',
          'type' => \CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Mailing Component Is Active?'),
        ),
      );
     }
    return self::$_fields;
  }

  static function getDynamicReferenceColumns($tableName) {
    $dynamic_reference_columns = array();
    return $dynamic_reference_columns;
  }
}