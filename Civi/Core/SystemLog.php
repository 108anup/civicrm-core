<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/SystemLog.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use Civi\Core\Annotations\Field as Field;
use JMS\Serializer\Annotation as JMS;

/**
 * SystemLog
 *
 * @CiviAPI\Entity("SystemLog")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_system_log")
 * @ORM\Entity
 *
 */
class SystemLog extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="message", type="string", length=128, nullable=false)
   * 
   */
  private $message;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="context", type="text", nullable=true)
   * 
   */
  private $context;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="level", type="string", length=9, nullable=true, options={"default": "info"})
   * 
   */
  private $level = 'info';
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="timestamp", type="datetime", nullable=true, columnDefinition="TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP")
   * 
   */
  private $timestamp = 'CURRENT_TIMESTAMP';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="contact_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $contactId;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="hostname", type="string", length=128, nullable=true)
   * 
   */
  private $hostname;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set message
   *
   * @param string $message
   * @return SystemLog
   */
  public function setMessage($message) {
    $this->message = $message;
    return $this;
  }

  /**
   * Get message
   *
   * @return string
   */
  public function getMessage() {
    return $this->message;
  }
  
  /**
   * Set context
   *
   * @param text $context
   * @return SystemLog
   */
  public function setContext($context) {
    $this->context = $context;
    return $this;
  }

  /**
   * Get context
   *
   * @return text
   */
  public function getContext() {
    return $this->context;
  }
  
  /**
   * Set level
   *
   * @param string $level
   * @return SystemLog
   */
  public function setLevel($level) {
    $this->level = $level;
    return $this;
  }

  /**
   * Get level
   *
   * @return string
   */
  public function getLevel() {
    return $this->level;
  }
  
  /**
   * Set timestamp
   *
   * @param datetime $timestamp
   * @return SystemLog
   */
  public function setTimestamp($timestamp) {
    $this->timestamp = $timestamp;
    return $this;
  }

  /**
   * Get timestamp
   *
   * @return datetime
   */
  public function getTimestamp() {
    return $this->timestamp;
  }
  
  /**
   * Set contactId
   *
   * @param integer $contactId
   * @return SystemLog
   */
  public function setContactId($contactId) {
    $this->contactId = $contactId;
    return $this;
  }

  /**
   * Get contactId
   *
   * @return integer
   */
  public function getContactId() {
    return $this->contactId;
  }
  
  /**
   * Set hostname
   *
   * @param string $hostname
   * @return SystemLog
   */
  public function setHostname($hostname) {
    $this->hostname = $hostname;
    return $this;
  }

  /**
   * Get hostname
   *
   * @return string
   */
  public function getHostname() {
    return $this->hostname;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
        'id' => array(
          'name' => 'id',
          'propertyName' => 'id',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('System Log ID'),
          'required' => true,
        ),
        'message' => array(
          'name' => 'message',
          'propertyName' => 'message',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('System Log Message'),
          'required' => true,
          'maxlength' => 128,
          'size' => \CRM_Utils_Type::HUGE,
        ),
        'context' => array(
          'name' => 'context',
          'propertyName' => 'context',
          'type' => \CRM_Utils_Type::T_LONGTEXT,
          'title' => ts('Detailed Log Data'),
        ),
        'level' => array(
          'name' => 'level',
          'propertyName' => 'level',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Detailed Log Data'),
          'maxlength' => 9,
          'size' => \CRM_Utils_Type::TWELVE,
          'default' => 'info',
        ),
        'timestamp' => array(
          'name' => 'timestamp',
          'propertyName' => 'timestamp',
          'type' => \CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Log Timestamp'),
          'default' => 'CURRENT_TIMESTAMP',
        ),
        'contact_id' => array(
          'name' => 'contact_id',
          'propertyName' => 'contactId',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Log Contact ID'),
        ),
        'hostname' => array(
          'name' => 'hostname',
          'propertyName' => 'hostname',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Log Host'),
          'maxlength' => 128,
          'size' => \CRM_Utils_Type::HUGE,
        ),
      );
     }
    return self::$_fields;
  }
}