<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Core/Setting.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Core;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use Civi\Core\Annotations\Field as Field;
use JMS\Serializer\Annotation as JMS;

/**
 * Setting
 *
 * @CiviAPI\Entity("Setting")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_setting", indexes={@ORM\Index(name="index_group_name", columns={"group_name","name"}),@ORM\Index(name="FK_civicrm_setting_domain_id", columns={"domain_id"}),@ORM\Index(name="FK_civicrm_setting_contact_id", columns={"contact_id"}),@ORM\Index(name="FK_civicrm_setting_component_id", columns={"component_id"}),@ORM\Index(name="FK_civicrm_setting_created_id", columns={"created_id"})})
 * @ORM\Entity
 *
 */
class Setting extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="group_name", type="string", length=64, nullable=false)
   * 
   */
  private $groupName;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="name", type="string", length=255, nullable=true)
   * 
   */
  private $name;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="value", type="text", length=65535, nullable=true)
   * 
   */
  private $value;
  
  /**
   * @var \Civi\Core\Domain
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Core\Domain")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="domain_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $domain;
  
  /**
   * @var \Civi\Contact\Contact
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contact_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contact;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_domain", type="boolean", nullable=true)
   * 
   */
  private $isDomain;
  
  /**
   * @var \Civi\Core\Component
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Core\Component")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="component_id", referencedColumnName="id")})
   */
  private $component;
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="created_date", type="datetime", nullable=true)
   * 
   */
  private $createdDate;
  
  /**
   * @var \Civi\Contact\Contact
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="created_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $created;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set groupName
   *
   * @param string $groupName
   * @return Setting
   */
  public function setGroupName($groupName) {
    $this->groupName = $groupName;
    return $this;
  }

  /**
   * Get groupName
   *
   * @return string
   */
  public function getGroupName() {
    return $this->groupName;
  }
  
  /**
   * Set name
   *
   * @param string $name
   * @return Setting
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set value
   *
   * @param text $value
   * @return Setting
   */
  public function setValue($value) {
    $this->value = $value;
    return $this;
  }

  /**
   * Get value
   *
   * @return text
   */
  public function getValue() {
    return $this->value;
  }
  
  /**
   * Set domain
   *
   * @param \Civi\Core\Domain $domain
   * @return Setting
   */
  public function setDomain(\Civi\Core\Domain $domain = null) {
    $this->domain = $domain;
    return $this;
  }

  /**
   * Get domain
   *
   * @return \Civi\Core\Domain
   */
  public function getDomain() {
    return $this->domain;
  }
  
  /**
   * Set contact
   *
   * @param \Civi\Contact\Contact $contact
   * @return Setting
   */
  public function setContact(\Civi\Contact\Contact $contact = null) {
    $this->contact = $contact;
    return $this;
  }

  /**
   * Get contact
   *
   * @return \Civi\Contact\Contact
   */
  public function getContact() {
    return $this->contact;
  }
  
  /**
   * Set isDomain
   *
   * @param boolean $isDomain
   * @return Setting
   */
  public function setIsDomain($isDomain) {
    $this->isDomain = $isDomain;
    return $this;
  }

  /**
   * Get isDomain
   *
   * @return boolean
   */
  public function getIsDomain() {
    return $this->isDomain;
  }
  
  /**
   * Set component
   *
   * @param \Civi\Core\Component $component
   * @return Setting
   */
  public function setComponent(\Civi\Core\Component $component = null) {
    $this->component = $component;
    return $this;
  }

  /**
   * Get component
   *
   * @return \Civi\Core\Component
   */
  public function getComponent() {
    return $this->component;
  }
  
  /**
   * Set createdDate
   *
   * @param datetime $createdDate
   * @return Setting
   */
  public function setCreatedDate($createdDate) {
    $this->createdDate = $createdDate;
    return $this;
  }

  /**
   * Get createdDate
   *
   * @return datetime
   */
  public function getCreatedDate() {
    return $this->createdDate;
  }
  
  /**
   * Set created
   *
   * @param \Civi\Contact\Contact $created
   * @return Setting
   */
  public function setCreated(\Civi\Contact\Contact $created = null) {
    $this->created = $created;
    return $this;
  }

  /**
   * Get created
   *
   * @return \Civi\Contact\Contact
   */
  public function getCreated() {
    return $this->created;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
        'id' => array(
          'name' => 'id',
          'propertyName' => 'id',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Setting ID'),
          'required' => true,
        ),
        'group_name' => array(
          'name' => 'group_name',
          'propertyName' => 'groupName',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Setting Group'),
          'required' => true,
          'maxlength' => 64,
          'size' => \CRM_Utils_Type::BIG,
        ),
        'name' => array(
          'name' => 'name',
          'propertyName' => 'name',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Setting Name'),
          'maxlength' => 255,
          'size' => \CRM_Utils_Type::HUGE,
        ),
        'value' => array(
          'name' => 'value',
          'propertyName' => 'value',
          'type' => \CRM_Utils_Type::T_TEXT,
          'title' => ts('Value'),
          'maxlength' => 65535,
        ),
        'domain_id' => array(
          'name' => 'domain_id',
          'propertyName' => 'domain',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Setting Domain'),
          'required' => true,
          'FKClassName' => 'CRM_Core_DAO_Domain',
          'pseudoconstant' => array(
            'table' => 'civicrm_domain',
            'keyColumn' => 'id',
            'labelColumn' => 'name',
          )
        ),
        'contact_id' => array(
          'name' => 'contact_id',
          'propertyName' => 'contact',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Setting Contact'),
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ),
        'is_domain' => array(
          'name' => 'is_domain',
          'propertyName' => 'isDomain',
          'type' => \CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is Domain Setting?'),
        ),
        'component_id' => array(
          'name' => 'component_id',
          'propertyName' => 'component',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Setting Component'),
          'FKClassName' => 'CRM_Core_DAO_Component',
          'html' => array(
            'type' => 'Select',
          ),
          'pseudoconstant' => array(
            'table' => 'civicrm_component',
            'keyColumn' => 'id',
            'labelColumn' => 'name',
          )
        ),
        'created_date' => array(
          'name' => 'created_date',
          'propertyName' => 'createdDate',
          'type' => \CRM_Utils_Type::T_DATE + \CRM_Utils_Type::T_TIME,
          'title' => ts('Setting Created Date'),
        ),
        'created_id' => array(
          'name' => 'created_id',
          'propertyName' => 'created',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Setting Created By'),
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ),
      );
     }
    return self::$_fields;
  }

  static function getDynamicReferenceColumns($tableName) {
    $dynamic_reference_columns = array();
    return $dynamic_reference_columns;
  }
}