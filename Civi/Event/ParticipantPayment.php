<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Event/ParticipantPayment.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Event;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use Civi\Core\Annotations\Field as Field;
use JMS\Serializer\Annotation as JMS;

/**
 * ParticipantPayment
 *
 * @CiviAPI\Entity("ParticipantPayment")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_participant_payment", uniqueConstraints={@ORM\UniqueConstraint(name="UI_contribution_participant", columns={"contribution_id","participant_id"})}, indexes={@ORM\Index(name="FK_civicrm_participant_payment_participant_id", columns={"participant_id"}),@ORM\Index(name="FK_civicrm_participant_payment_contribution_id", columns={"contribution_id"})})
 * @ORM\Entity
 *
 */
class ParticipantPayment extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;
    
  /**
   * @var \Civi\Event\Participant
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Event\Participant")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="participant_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $participant;
  
  /**
   * @var \Civi\Contribute\Contribution
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Contribute\Contribution")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="contribution_id", referencedColumnName="id", onDelete="CASCADE")})
   */
  private $contribution;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set participant
   *
   * @param \Civi\Event\Participant $participant
   * @return ParticipantPayment
   */
  public function setParticipant(\Civi\Event\Participant $participant = null) {
    $this->participant = $participant;
    return $this;
  }

  /**
   * Get participant
   *
   * @return \Civi\Event\Participant
   */
  public function getParticipant() {
    return $this->participant;
  }
  
  /**
   * Set contribution
   *
   * @param \Civi\Contribute\Contribution $contribution
   * @return ParticipantPayment
   */
  public function setContribution(\Civi\Contribute\Contribution $contribution = null) {
    $this->contribution = $contribution;
    return $this;
  }

  /**
   * Get contribution
   *
   * @return \Civi\Contribute\Contribution
   */
  public function getContribution() {
    return $this->contribution;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
        'id' => array(
          'name' => 'id',
          'propertyName' => 'id',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Payment ID'),
          'required' => true,
        ),
        'participant_id' => array(
          'name' => 'participant_id',
          'propertyName' => 'participant',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Participant ID'),
          'required' => true,
          'FKClassName' => 'CRM_Event_DAO_Participant',
        ),
        'contribution_id' => array(
          'name' => 'contribution_id',
          'propertyName' => 'contribution',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Contribution'),
          'required' => true,
          'FKClassName' => 'CRM_Contribute_DAO_Contribution',
        ),
      );
     }
    return self::$_fields;
  }

  static function getDynamicReferenceColumns($tableName) {
    $dynamic_reference_columns = array();
    return $dynamic_reference_columns;
  }
}