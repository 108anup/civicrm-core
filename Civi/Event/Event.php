<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Event/Event.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Event;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use JMS\Serializer\Annotation as JMS;

/**
 * Event
 *
 * @CiviAPI\Entity("Event")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_event", indexes={@ORM\Index(name="index_event_type_id", columns={"event_type_id"}),@ORM\Index(name="index_participant_listing_id", columns={"participant_listing_id"}),@ORM\Index(name="index_parent_event_id", columns={"parent_event_id"}),@ORM\Index(name="FK_civicrm_event_loc_block_id", columns={"loc_block_id"}),@ORM\Index(name="FK_civicrm_event_created_id", columns={"created_id"}),@ORM\Index(name="FK_civicrm_event_campaign_id", columns={"campaign_id"})})
 * @ORM\Entity
 *
 */
class Event extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="title", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $title;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="summary", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $summary;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="description", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $description;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="event_type_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $eventTypeId = '0';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="participant_listing_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $participantListingId = '0';
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_public", type="boolean", nullable=false)
   * 
   * 
   */
  private $isPublic = '1';
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="start_date", type="datetime", nullable=true)
   * 
   * 
   */
  private $startDate;
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="end_date", type="datetime", nullable=true)
   * 
   * 
   */
  private $endDate;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_online_registration", type="boolean", nullable=false)
   * 
   * 
   */
  private $isOnlineRegistration = '0';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="registration_link_text", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $registrationLinkText;
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="registration_start_date", type="datetime", nullable=true)
   * 
   * 
   */
  private $registrationStartDate;
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="registration_end_date", type="datetime", nullable=true)
   * 
   * 
   */
  private $registrationEndDate;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="max_participants", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $maxParticipants = 'NULL';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="event_full_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $eventFullText;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_monetary", type="boolean", nullable=false)
   * 
   * 
   */
  private $isMonetary = '0';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="financial_type_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $financialTypeId = 'NULL';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="payment_processor", type="string", length=128, nullable=true)
   * 
   * 
   */
  private $paymentProcessor;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_map", type="boolean", nullable=false)
   * 
   * 
   */
  private $isMap = '0';
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_active", type="boolean", nullable=false)
   * 
   * 
   */
  private $isActive = '0';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="fee_label", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $feeLabel;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_show_location", type="boolean", nullable=false)
   * 
   * 
   */
  private $isShowLocation = '1';
  
  /**
   * @var \Civi\Core\LocBlock
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Core\LocBlock")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="loc_block_id", referencedColumnName="id", onDelete="SET NULL")})
   * 
   */
  private $locBlock;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="default_role_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $defaultRoleId = '1';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="intro_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $introText;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="footer_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $footerText;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="confirm_title", type="string", length=255, nullable=false)
   * 
   * 
   */
  private $confirmTitle = 'NULL';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="confirm_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $confirmText;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="confirm_footer_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $confirmFooterText;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_email_confirm", type="boolean", nullable=false)
   * 
   * 
   */
  private $isEmailConfirm = '0';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="confirm_email_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $confirmEmailText;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="confirm_from_name", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $confirmFromName;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="confirm_from_email", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $confirmFromEmail;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="cc_confirm", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $ccConfirm;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="bcc_confirm", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $bccConfirm;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="default_fee_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   * 
   */
  private $defaultFeeId;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="default_discount_fee_id", type="integer", nullable=true, options={"unsigned":true})
   * 
   * 
   */
  private $defaultDiscountFeeId;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="thankyou_title", type="string", length=255, nullable=false)
   * 
   * 
   */
  private $thankyouTitle = 'NULL';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="thankyou_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $thankyouText;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="thankyou_footer_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $thankyouFooterText;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_pay_later", type="boolean", nullable=false)
   * 
   * 
   */
  private $isPayLater = '0';
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="pay_later_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $payLaterText;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="pay_later_receipt", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $payLaterReceipt;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_partial_payment", type="boolean", nullable=false)
   * 
   * 
   */
  private $isPartialPayment = '0';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="initial_amount_label", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $initialAmountLabel;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="initial_amount_help_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $initialAmountHelpText;
  
  /**
   * @var float
   *
   * @JMS\Type("float")
   * @ORM\Column(name="min_initial_amount", type="float", nullable=true)
   * 
   * 
   */
  private $minInitialAmount;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_multiple_registrations", type="boolean", nullable=false)
   * 
   * 
   */
  private $isMultipleRegistrations = '0';
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="allow_same_participant_emails", type="boolean", nullable=false)
   * 
   * 
   */
  private $allowSameParticipantEmails = '0';
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="has_waitlist", type="boolean", nullable=true)
   * 
   * 
   */
  private $hasWaitlist;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="requires_approval", type="boolean", nullable=true)
   * 
   * 
   */
  private $requiresApproval;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="expiration_time", type="integer", nullable=true, options={"unsigned":true})
   * 
   * 
   */
  private $expirationTime;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="waitlist_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $waitlistText;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="approval_req_text", type="text", length=65535, nullable=true)
   * 
   * 
   */
  private $approvalReqText;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_template", type="boolean", nullable=false)
   * 
   * 
   */
  private $isTemplate = '0';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="template_title", type="string", length=255, nullable=true)
   * 
   * 
   */
  private $templateTitle;
  
  /**
   * @var \Civi\Contact\Contact
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Contact\Contact")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="created_id", referencedColumnName="id", onDelete="SET NULL")})
   * 
   */
  private $created;
  
  /**
   * @var datetime
   *
   * @JMS\Type("datetime")
   * @ORM\Column(name="created_date", type="datetime", nullable=true)
   * 
   * 
   */
  private $createdDate;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="currency", type="string", length=3, nullable=true)
   * 
   * 
   */
  private $currency;
  
  /**
   * @var \Civi\Campaign\Campaign
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Campaign\Campaign")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="campaign_id", referencedColumnName="id", onDelete="SET NULL")})
   * 
   */
  private $campaign;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_share", type="boolean", nullable=false)
   * 
   * 
   */
  private $isShare = '1';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="parent_event_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $parentEventId = 'NULL';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="slot_label_id", type="integer", nullable=false, options={"unsigned":true})
   * 
   * 
   */
  private $slotLabelId = 'NULL';

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set title
   *
   * @param string $title
   * @return Event
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set summary
   *
   * @param text $summary
   * @return Event
   */
  public function setSummary($summary) {
    $this->summary = $summary;
    return $this;
  }

  /**
   * Get summary
   *
   * @return text
   */
  public function getSummary() {
    return $this->summary;
  }
  
  /**
   * Set description
   *
   * @param text $description
   * @return Event
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return text
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set eventTypeId
   *
   * @param integer $eventTypeId
   * @return Event
   */
  public function setEventTypeId($eventTypeId) {
    $this->eventTypeId = $eventTypeId;
    return $this;
  }

  /**
   * Get eventTypeId
   *
   * @return integer
   */
  public function getEventTypeId() {
    return $this->eventTypeId;
  }
  
  /**
   * Set participantListingId
   *
   * @param integer $participantListingId
   * @return Event
   */
  public function setParticipantListingId($participantListingId) {
    $this->participantListingId = $participantListingId;
    return $this;
  }

  /**
   * Get participantListingId
   *
   * @return integer
   */
  public function getParticipantListingId() {
    return $this->participantListingId;
  }
  
  /**
   * Set isPublic
   *
   * @param boolean $isPublic
   * @return Event
   */
  public function setIsPublic($isPublic) {
    $this->isPublic = $isPublic;
    return $this;
  }

  /**
   * Get isPublic
   *
   * @return boolean
   */
  public function getIsPublic() {
    return $this->isPublic;
  }
  
  /**
   * Set startDate
   *
   * @param datetime $startDate
   * @return Event
   */
  public function setStartDate($startDate) {
    $this->startDate = $startDate;
    return $this;
  }

  /**
   * Get startDate
   *
   * @return datetime
   */
  public function getStartDate() {
    return $this->startDate;
  }
  
  /**
   * Set endDate
   *
   * @param datetime $endDate
   * @return Event
   */
  public function setEndDate($endDate) {
    $this->endDate = $endDate;
    return $this;
  }

  /**
   * Get endDate
   *
   * @return datetime
   */
  public function getEndDate() {
    return $this->endDate;
  }
  
  /**
   * Set isOnlineRegistration
   *
   * @param boolean $isOnlineRegistration
   * @return Event
   */
  public function setIsOnlineRegistration($isOnlineRegistration) {
    $this->isOnlineRegistration = $isOnlineRegistration;
    return $this;
  }

  /**
   * Get isOnlineRegistration
   *
   * @return boolean
   */
  public function getIsOnlineRegistration() {
    return $this->isOnlineRegistration;
  }
  
  /**
   * Set registrationLinkText
   *
   * @param string $registrationLinkText
   * @return Event
   */
  public function setRegistrationLinkText($registrationLinkText) {
    $this->registrationLinkText = $registrationLinkText;
    return $this;
  }

  /**
   * Get registrationLinkText
   *
   * @return string
   */
  public function getRegistrationLinkText() {
    return $this->registrationLinkText;
  }
  
  /**
   * Set registrationStartDate
   *
   * @param datetime $registrationStartDate
   * @return Event
   */
  public function setRegistrationStartDate($registrationStartDate) {
    $this->registrationStartDate = $registrationStartDate;
    return $this;
  }

  /**
   * Get registrationStartDate
   *
   * @return datetime
   */
  public function getRegistrationStartDate() {
    return $this->registrationStartDate;
  }
  
  /**
   * Set registrationEndDate
   *
   * @param datetime $registrationEndDate
   * @return Event
   */
  public function setRegistrationEndDate($registrationEndDate) {
    $this->registrationEndDate = $registrationEndDate;
    return $this;
  }

  /**
   * Get registrationEndDate
   *
   * @return datetime
   */
  public function getRegistrationEndDate() {
    return $this->registrationEndDate;
  }
  
  /**
   * Set maxParticipants
   *
   * @param integer $maxParticipants
   * @return Event
   */
  public function setMaxParticipants($maxParticipants) {
    $this->maxParticipants = $maxParticipants;
    return $this;
  }

  /**
   * Get maxParticipants
   *
   * @return integer
   */
  public function getMaxParticipants() {
    return $this->maxParticipants;
  }
  
  /**
   * Set eventFullText
   *
   * @param text $eventFullText
   * @return Event
   */
  public function setEventFullText($eventFullText) {
    $this->eventFullText = $eventFullText;
    return $this;
  }

  /**
   * Get eventFullText
   *
   * @return text
   */
  public function getEventFullText() {
    return $this->eventFullText;
  }
  
  /**
   * Set isMonetary
   *
   * @param boolean $isMonetary
   * @return Event
   */
  public function setIsMonetary($isMonetary) {
    $this->isMonetary = $isMonetary;
    return $this;
  }

  /**
   * Get isMonetary
   *
   * @return boolean
   */
  public function getIsMonetary() {
    return $this->isMonetary;
  }
  
  /**
   * Set financialTypeId
   *
   * @param integer $financialTypeId
   * @return Event
   */
  public function setFinancialTypeId($financialTypeId) {
    $this->financialTypeId = $financialTypeId;
    return $this;
  }

  /**
   * Get financialTypeId
   *
   * @return integer
   */
  public function getFinancialTypeId() {
    return $this->financialTypeId;
  }
  
  /**
   * Set paymentProcessor
   *
   * @param string $paymentProcessor
   * @return Event
   */
  public function setPaymentProcessor($paymentProcessor) {
    $this->paymentProcessor = $paymentProcessor;
    return $this;
  }

  /**
   * Get paymentProcessor
   *
   * @return string
   */
  public function getPaymentProcessor() {
    return $this->paymentProcessor;
  }
  
  /**
   * Set isMap
   *
   * @param boolean $isMap
   * @return Event
   */
  public function setIsMap($isMap) {
    $this->isMap = $isMap;
    return $this;
  }

  /**
   * Get isMap
   *
   * @return boolean
   */
  public function getIsMap() {
    return $this->isMap;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return Event
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set feeLabel
   *
   * @param string $feeLabel
   * @return Event
   */
  public function setFeeLabel($feeLabel) {
    $this->feeLabel = $feeLabel;
    return $this;
  }

  /**
   * Get feeLabel
   *
   * @return string
   */
  public function getFeeLabel() {
    return $this->feeLabel;
  }
  
  /**
   * Set isShowLocation
   *
   * @param boolean $isShowLocation
   * @return Event
   */
  public function setIsShowLocation($isShowLocation) {
    $this->isShowLocation = $isShowLocation;
    return $this;
  }

  /**
   * Get isShowLocation
   *
   * @return boolean
   */
  public function getIsShowLocation() {
    return $this->isShowLocation;
  }
  
  /**
   * Set locBlock
   *
   * @param \Civi\Core\LocBlock $locBlock
   * @return Event
   */
  public function setLocBlock(\Civi\Core\LocBlock $locBlock = null) {
    $this->locBlock = $locBlock;
    return $this;
  }

  /**
   * Get locBlock
   *
   * @return \Civi\Core\LocBlock
   */
  public function getLocBlock() {
    return $this->locBlock;
  }
  
  /**
   * Set defaultRoleId
   *
   * @param integer $defaultRoleId
   * @return Event
   */
  public function setDefaultRoleId($defaultRoleId) {
    $this->defaultRoleId = $defaultRoleId;
    return $this;
  }

  /**
   * Get defaultRoleId
   *
   * @return integer
   */
  public function getDefaultRoleId() {
    return $this->defaultRoleId;
  }
  
  /**
   * Set introText
   *
   * @param text $introText
   * @return Event
   */
  public function setIntroText($introText) {
    $this->introText = $introText;
    return $this;
  }

  /**
   * Get introText
   *
   * @return text
   */
  public function getIntroText() {
    return $this->introText;
  }
  
  /**
   * Set footerText
   *
   * @param text $footerText
   * @return Event
   */
  public function setFooterText($footerText) {
    $this->footerText = $footerText;
    return $this;
  }

  /**
   * Get footerText
   *
   * @return text
   */
  public function getFooterText() {
    return $this->footerText;
  }
  
  /**
   * Set confirmTitle
   *
   * @param string $confirmTitle
   * @return Event
   */
  public function setConfirmTitle($confirmTitle) {
    $this->confirmTitle = $confirmTitle;
    return $this;
  }

  /**
   * Get confirmTitle
   *
   * @return string
   */
  public function getConfirmTitle() {
    return $this->confirmTitle;
  }
  
  /**
   * Set confirmText
   *
   * @param text $confirmText
   * @return Event
   */
  public function setConfirmText($confirmText) {
    $this->confirmText = $confirmText;
    return $this;
  }

  /**
   * Get confirmText
   *
   * @return text
   */
  public function getConfirmText() {
    return $this->confirmText;
  }
  
  /**
   * Set confirmFooterText
   *
   * @param text $confirmFooterText
   * @return Event
   */
  public function setConfirmFooterText($confirmFooterText) {
    $this->confirmFooterText = $confirmFooterText;
    return $this;
  }

  /**
   * Get confirmFooterText
   *
   * @return text
   */
  public function getConfirmFooterText() {
    return $this->confirmFooterText;
  }
  
  /**
   * Set isEmailConfirm
   *
   * @param boolean $isEmailConfirm
   * @return Event
   */
  public function setIsEmailConfirm($isEmailConfirm) {
    $this->isEmailConfirm = $isEmailConfirm;
    return $this;
  }

  /**
   * Get isEmailConfirm
   *
   * @return boolean
   */
  public function getIsEmailConfirm() {
    return $this->isEmailConfirm;
  }
  
  /**
   * Set confirmEmailText
   *
   * @param text $confirmEmailText
   * @return Event
   */
  public function setConfirmEmailText($confirmEmailText) {
    $this->confirmEmailText = $confirmEmailText;
    return $this;
  }

  /**
   * Get confirmEmailText
   *
   * @return text
   */
  public function getConfirmEmailText() {
    return $this->confirmEmailText;
  }
  
  /**
   * Set confirmFromName
   *
   * @param string $confirmFromName
   * @return Event
   */
  public function setConfirmFromName($confirmFromName) {
    $this->confirmFromName = $confirmFromName;
    return $this;
  }

  /**
   * Get confirmFromName
   *
   * @return string
   */
  public function getConfirmFromName() {
    return $this->confirmFromName;
  }
  
  /**
   * Set confirmFromEmail
   *
   * @param string $confirmFromEmail
   * @return Event
   */
  public function setConfirmFromEmail($confirmFromEmail) {
    $this->confirmFromEmail = $confirmFromEmail;
    return $this;
  }

  /**
   * Get confirmFromEmail
   *
   * @return string
   */
  public function getConfirmFromEmail() {
    return $this->confirmFromEmail;
  }
  
  /**
   * Set ccConfirm
   *
   * @param string $ccConfirm
   * @return Event
   */
  public function setCcConfirm($ccConfirm) {
    $this->ccConfirm = $ccConfirm;
    return $this;
  }

  /**
   * Get ccConfirm
   *
   * @return string
   */
  public function getCcConfirm() {
    return $this->ccConfirm;
  }
  
  /**
   * Set bccConfirm
   *
   * @param string $bccConfirm
   * @return Event
   */
  public function setBccConfirm($bccConfirm) {
    $this->bccConfirm = $bccConfirm;
    return $this;
  }

  /**
   * Get bccConfirm
   *
   * @return string
   */
  public function getBccConfirm() {
    return $this->bccConfirm;
  }
  
  /**
   * Set defaultFeeId
   *
   * @param integer $defaultFeeId
   * @return Event
   */
  public function setDefaultFeeId($defaultFeeId) {
    $this->defaultFeeId = $defaultFeeId;
    return $this;
  }

  /**
   * Get defaultFeeId
   *
   * @return integer
   */
  public function getDefaultFeeId() {
    return $this->defaultFeeId;
  }
  
  /**
   * Set defaultDiscountFeeId
   *
   * @param integer $defaultDiscountFeeId
   * @return Event
   */
  public function setDefaultDiscountFeeId($defaultDiscountFeeId) {
    $this->defaultDiscountFeeId = $defaultDiscountFeeId;
    return $this;
  }

  /**
   * Get defaultDiscountFeeId
   *
   * @return integer
   */
  public function getDefaultDiscountFeeId() {
    return $this->defaultDiscountFeeId;
  }
  
  /**
   * Set thankyouTitle
   *
   * @param string $thankyouTitle
   * @return Event
   */
  public function setThankyouTitle($thankyouTitle) {
    $this->thankyouTitle = $thankyouTitle;
    return $this;
  }

  /**
   * Get thankyouTitle
   *
   * @return string
   */
  public function getThankyouTitle() {
    return $this->thankyouTitle;
  }
  
  /**
   * Set thankyouText
   *
   * @param text $thankyouText
   * @return Event
   */
  public function setThankyouText($thankyouText) {
    $this->thankyouText = $thankyouText;
    return $this;
  }

  /**
   * Get thankyouText
   *
   * @return text
   */
  public function getThankyouText() {
    return $this->thankyouText;
  }
  
  /**
   * Set thankyouFooterText
   *
   * @param text $thankyouFooterText
   * @return Event
   */
  public function setThankyouFooterText($thankyouFooterText) {
    $this->thankyouFooterText = $thankyouFooterText;
    return $this;
  }

  /**
   * Get thankyouFooterText
   *
   * @return text
   */
  public function getThankyouFooterText() {
    return $this->thankyouFooterText;
  }
  
  /**
   * Set isPayLater
   *
   * @param boolean $isPayLater
   * @return Event
   */
  public function setIsPayLater($isPayLater) {
    $this->isPayLater = $isPayLater;
    return $this;
  }

  /**
   * Get isPayLater
   *
   * @return boolean
   */
  public function getIsPayLater() {
    return $this->isPayLater;
  }
  
  /**
   * Set payLaterText
   *
   * @param text $payLaterText
   * @return Event
   */
  public function setPayLaterText($payLaterText) {
    $this->payLaterText = $payLaterText;
    return $this;
  }

  /**
   * Get payLaterText
   *
   * @return text
   */
  public function getPayLaterText() {
    return $this->payLaterText;
  }
  
  /**
   * Set payLaterReceipt
   *
   * @param text $payLaterReceipt
   * @return Event
   */
  public function setPayLaterReceipt($payLaterReceipt) {
    $this->payLaterReceipt = $payLaterReceipt;
    return $this;
  }

  /**
   * Get payLaterReceipt
   *
   * @return text
   */
  public function getPayLaterReceipt() {
    return $this->payLaterReceipt;
  }
  
  /**
   * Set isPartialPayment
   *
   * @param boolean $isPartialPayment
   * @return Event
   */
  public function setIsPartialPayment($isPartialPayment) {
    $this->isPartialPayment = $isPartialPayment;
    return $this;
  }

  /**
   * Get isPartialPayment
   *
   * @return boolean
   */
  public function getIsPartialPayment() {
    return $this->isPartialPayment;
  }
  
  /**
   * Set initialAmountLabel
   *
   * @param string $initialAmountLabel
   * @return Event
   */
  public function setInitialAmountLabel($initialAmountLabel) {
    $this->initialAmountLabel = $initialAmountLabel;
    return $this;
  }

  /**
   * Get initialAmountLabel
   *
   * @return string
   */
  public function getInitialAmountLabel() {
    return $this->initialAmountLabel;
  }
  
  /**
   * Set initialAmountHelpText
   *
   * @param text $initialAmountHelpText
   * @return Event
   */
  public function setInitialAmountHelpText($initialAmountHelpText) {
    $this->initialAmountHelpText = $initialAmountHelpText;
    return $this;
  }

  /**
   * Get initialAmountHelpText
   *
   * @return text
   */
  public function getInitialAmountHelpText() {
    return $this->initialAmountHelpText;
  }
  
  /**
   * Set minInitialAmount
   *
   * @param float $minInitialAmount
   * @return Event
   */
  public function setMinInitialAmount($minInitialAmount) {
    $this->minInitialAmount = $minInitialAmount;
    return $this;
  }

  /**
   * Get minInitialAmount
   *
   * @return float
   */
  public function getMinInitialAmount() {
    return $this->minInitialAmount;
  }
  
  /**
   * Set isMultipleRegistrations
   *
   * @param boolean $isMultipleRegistrations
   * @return Event
   */
  public function setIsMultipleRegistrations($isMultipleRegistrations) {
    $this->isMultipleRegistrations = $isMultipleRegistrations;
    return $this;
  }

  /**
   * Get isMultipleRegistrations
   *
   * @return boolean
   */
  public function getIsMultipleRegistrations() {
    return $this->isMultipleRegistrations;
  }
  
  /**
   * Set allowSameParticipantEmails
   *
   * @param boolean $allowSameParticipantEmails
   * @return Event
   */
  public function setAllowSameParticipantEmails($allowSameParticipantEmails) {
    $this->allowSameParticipantEmails = $allowSameParticipantEmails;
    return $this;
  }

  /**
   * Get allowSameParticipantEmails
   *
   * @return boolean
   */
  public function getAllowSameParticipantEmails() {
    return $this->allowSameParticipantEmails;
  }
  
  /**
   * Set hasWaitlist
   *
   * @param boolean $hasWaitlist
   * @return Event
   */
  public function setHasWaitlist($hasWaitlist) {
    $this->hasWaitlist = $hasWaitlist;
    return $this;
  }

  /**
   * Get hasWaitlist
   *
   * @return boolean
   */
  public function getHasWaitlist() {
    return $this->hasWaitlist;
  }
  
  /**
   * Set requiresApproval
   *
   * @param boolean $requiresApproval
   * @return Event
   */
  public function setRequiresApproval($requiresApproval) {
    $this->requiresApproval = $requiresApproval;
    return $this;
  }

  /**
   * Get requiresApproval
   *
   * @return boolean
   */
  public function getRequiresApproval() {
    return $this->requiresApproval;
  }
  
  /**
   * Set expirationTime
   *
   * @param integer $expirationTime
   * @return Event
   */
  public function setExpirationTime($expirationTime) {
    $this->expirationTime = $expirationTime;
    return $this;
  }

  /**
   * Get expirationTime
   *
   * @return integer
   */
  public function getExpirationTime() {
    return $this->expirationTime;
  }
  
  /**
   * Set waitlistText
   *
   * @param text $waitlistText
   * @return Event
   */
  public function setWaitlistText($waitlistText) {
    $this->waitlistText = $waitlistText;
    return $this;
  }

  /**
   * Get waitlistText
   *
   * @return text
   */
  public function getWaitlistText() {
    return $this->waitlistText;
  }
  
  /**
   * Set approvalReqText
   *
   * @param text $approvalReqText
   * @return Event
   */
  public function setApprovalReqText($approvalReqText) {
    $this->approvalReqText = $approvalReqText;
    return $this;
  }

  /**
   * Get approvalReqText
   *
   * @return text
   */
  public function getApprovalReqText() {
    return $this->approvalReqText;
  }
  
  /**
   * Set isTemplate
   *
   * @param boolean $isTemplate
   * @return Event
   */
  public function setIsTemplate($isTemplate) {
    $this->isTemplate = $isTemplate;
    return $this;
  }

  /**
   * Get isTemplate
   *
   * @return boolean
   */
  public function getIsTemplate() {
    return $this->isTemplate;
  }
  
  /**
   * Set templateTitle
   *
   * @param string $templateTitle
   * @return Event
   */
  public function setTemplateTitle($templateTitle) {
    $this->templateTitle = $templateTitle;
    return $this;
  }

  /**
   * Get templateTitle
   *
   * @return string
   */
  public function getTemplateTitle() {
    return $this->templateTitle;
  }
  
  /**
   * Set created
   *
   * @param \Civi\Contact\Contact $created
   * @return Event
   */
  public function setCreated(\Civi\Contact\Contact $created = null) {
    $this->created = $created;
    return $this;
  }

  /**
   * Get created
   *
   * @return \Civi\Contact\Contact
   */
  public function getCreated() {
    return $this->created;
  }
  
  /**
   * Set createdDate
   *
   * @param datetime $createdDate
   * @return Event
   */
  public function setCreatedDate($createdDate) {
    $this->createdDate = $createdDate;
    return $this;
  }

  /**
   * Get createdDate
   *
   * @return datetime
   */
  public function getCreatedDate() {
    return $this->createdDate;
  }
  
  /**
   * Set currency
   *
   * @param string $currency
   * @return Event
   */
  public function setCurrency($currency) {
    $this->currency = $currency;
    return $this;
  }

  /**
   * Get currency
   *
   * @return string
   */
  public function getCurrency() {
    return $this->currency;
  }
  
  /**
   * Set campaign
   *
   * @param \Civi\Campaign\Campaign $campaign
   * @return Event
   */
  public function setCampaign(\Civi\Campaign\Campaign $campaign = null) {
    $this->campaign = $campaign;
    return $this;
  }

  /**
   * Get campaign
   *
   * @return \Civi\Campaign\Campaign
   */
  public function getCampaign() {
    return $this->campaign;
  }
  
  /**
   * Set isShare
   *
   * @param boolean $isShare
   * @return Event
   */
  public function setIsShare($isShare) {
    $this->isShare = $isShare;
    return $this;
  }

  /**
   * Get isShare
   *
   * @return boolean
   */
  public function getIsShare() {
    return $this->isShare;
  }
  
  /**
   * Set parentEventId
   *
   * @param integer $parentEventId
   * @return Event
   */
  public function setParentEventId($parentEventId) {
    $this->parentEventId = $parentEventId;
    return $this;
  }

  /**
   * Get parentEventId
   *
   * @return integer
   */
  public function getParentEventId() {
    return $this->parentEventId;
  }
  
  /**
   * Set slotLabelId
   *
   * @param integer $slotLabelId
   * @return Event
   */
  public function setSlotLabelId($slotLabelId) {
    $this->slotLabelId = $slotLabelId;
    return $this;
  }

  /**
   * Get slotLabelId
   *
   * @return integer
   */
  public function getSlotLabelId() {
    return $this->slotLabelId;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'propertyName' => 'id',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Event'),
                        'required' => true,
                                             
                                    
                          ),
      
              'event_title' => array(
      
        'name' => 'title',
        'propertyName' => 'title',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Event Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                'import' => true,
        'where' => 'civicrm_event.title',
        'headerPattern' => '/(event.)?title$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'summary' => array(
      
        'name' => 'summary',
        'propertyName' => 'summary',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Event Summary'),
                                 'maxlength' => 65535,
                                  'rows' => 4,
                         'cols' => 60,
         
                                    
                          ),
      
              'event_description' => array(
      
        'name' => 'description',
        'propertyName' => 'description',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Event Description'),
                                 'maxlength' => 65535,
                                  'rows' => 8,
                         'cols' => 60,
         
                                    
                          ),
      
              'event_type_id' => array(
      
        'name' => 'event_type_id',
        'propertyName' => 'eventTypeId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Event Type'),
                                                     
                                    
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'event_type',
                    )
                 ),
      
              'participant_listing_id' => array(
      
        'name' => 'participant_listing_id',
        'propertyName' => 'participantListingId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Participant Listing'),
                                                     
                                    
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'participant_listing',
                    )
                 ),
      
              'is_public' => array(
      
        'name' => 'is_public',
        'propertyName' => 'isPublic',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Event Public'),
                                                     
                                           'default' => '1',
         
                          ),
      
              'event_start_date' => array(
      
        'name' => 'start_date',
        'propertyName' => 'startDate',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Event Start Date'),
                                                     
                'import' => true,
        'where' => 'civicrm_event.start_date',
        'headerPattern' => '/^start|(s(tart\s)?date)$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'event_end_date' => array(
      
        'name' => 'end_date',
        'propertyName' => 'endDate',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Event End Date'),
                                                     
                'import' => true,
        'where' => 'civicrm_event.end_date',
        'headerPattern' => '/^end|(e(nd\s)?date)$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'is_online_registration' => array(
      
        'name' => 'is_online_registration',
        'propertyName' => 'isOnlineRegistration',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Online Registration'),
                                                     
                                    
                          ),
      
              'registration_link_text' => array(
      
        'name' => 'registration_link_text',
        'propertyName' => 'registrationLinkText',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Event Registration Link Text'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'registration_start_date' => array(
      
        'name' => 'registration_start_date',
        'propertyName' => 'registrationStartDate',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Registration Start Date'),
                                                     
                                    
                          ),
      
              'registration_end_date' => array(
      
        'name' => 'registration_end_date',
        'propertyName' => 'registrationEndDate',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Registration End Date'),
                                                     
                                    
                          ),
      
              'max_participants' => array(
      
        'name' => 'max_participants',
        'propertyName' => 'maxParticipants',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Max Participants'),
                                                     
                                           'default' => 'NULL',
         
                          ),
      
              'event_full_text' => array(
      
        'name' => 'event_full_text',
        'propertyName' => 'eventFullText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Event Information'),
                                 'maxlength' => 65535,
                                  'rows' => 4,
                         'cols' => 60,
         
                                    
                          ),
      
              'is_monetary' => array(
      
        'name' => 'is_monetary',
        'propertyName' => 'isMonetary',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is this a PAID event?'),
                                                     
                                    
                          ),
      
              'financial_type_id' => array(
      
        'name' => 'financial_type_id',
        'propertyName' => 'financialTypeId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Financial Type'),
                                                     
                                           'default' => 'NULL',
         
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_financial_type',
                      'keyColumn' => 'id',
                      'labelColumn' => 'name',
                    )
                 ),
      
              'payment_processor' => array(
      
        'name' => 'payment_processor',
        'propertyName' => 'paymentProcessor',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Payment Processor'),
                                 'maxlength' => 128,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_payment_processor',
                      'keyColumn' => 'id',
                      'labelColumn' => 'name',
                    )
                 ),
      
              'is_map' => array(
      
        'name' => 'is_map',
        'propertyName' => 'isMap',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Map Enabled'),
                                                     
                                    
                          ),
      
              'is_active' => array(
      
        'name' => 'is_active',
        'propertyName' => 'isActive',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Active'),
                                                     
                                    
                          ),
      
              'fee_label' => array(
      
        'name' => 'fee_label',
        'propertyName' => 'feeLabel',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Fee Label'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                'import' => true,
        'where' => 'civicrm_event.fee_label',
        'headerPattern' => '/^fee|(f(ee\s)?label)$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'is_show_location' => array(
      
        'name' => 'is_show_location',
        'propertyName' => 'isShowLocation',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('show location'),
                                                     
                                           'default' => '1',
         
                          ),
      
              'loc_block_id' => array(
      
        'name' => 'loc_block_id',
        'propertyName' => 'locBlock',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Location Block ID'),
                                                     
                                    
                'FKClassName' => 'CRM_Core_LocBlock',
                          ),
      
              'default_role_id' => array(
      
        'name' => 'default_role_id',
        'propertyName' => 'defaultRoleId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Participant Role'),
                                                     
                'import' => true,
        'where' => 'civicrm_event.default_role_id',
        'headerPattern' => '',
        'dataPattern' => '',
                         'export' => true,
                                          'default' => '1',
         
                                     'pseudoconstant' => array(
                                'optionGroupName' => 'participant_role',
                    )
                 ),
      
              'intro_text' => array(
      
        'name' => 'intro_text',
        'propertyName' => 'introText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Introductory Message'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'footer_text' => array(
      
        'name' => 'footer_text',
        'propertyName' => 'footerText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Footer Message'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'confirm_title' => array(
      
        'name' => 'confirm_title',
        'propertyName' => 'confirmTitle',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Confirmation Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                           'default' => 'NULL',
         
                          ),
      
              'confirm_text' => array(
      
        'name' => 'confirm_text',
        'propertyName' => 'confirmText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Confirm Text'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'confirm_footer_text' => array(
      
        'name' => 'confirm_footer_text',
        'propertyName' => 'confirmFooterText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Footer Text'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'is_email_confirm' => array(
      
        'name' => 'is_email_confirm',
        'propertyName' => 'isEmailConfirm',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is confirm email'),
                                                     
                                    
                          ),
      
              'confirm_email_text' => array(
      
        'name' => 'confirm_email_text',
        'propertyName' => 'confirmEmailText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Confirmation Email Text'),
                                 'maxlength' => 65535,
                                  'rows' => 4,
                         'cols' => 50,
         
                                    
                          ),
      
              'confirm_from_name' => array(
      
        'name' => 'confirm_from_name',
        'propertyName' => 'confirmFromName',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Confirm From Name'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'confirm_from_email' => array(
      
        'name' => 'confirm_from_email',
        'propertyName' => 'confirmFromEmail',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Confirm From Email'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'cc_confirm' => array(
      
        'name' => 'cc_confirm',
        'propertyName' => 'ccConfirm',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Cc Confirm'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'bcc_confirm' => array(
      
        'name' => 'bcc_confirm',
        'propertyName' => 'bccConfirm',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Bcc Confirm'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'default_fee_id' => array(
      
        'name' => 'default_fee_id',
        'propertyName' => 'defaultFeeId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Default Fee ID'),
                                                     
                                    
                          ),
      
              'default_discount_fee_id' => array(
      
        'name' => 'default_discount_fee_id',
        'propertyName' => 'defaultDiscountFeeId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Default Discount Fee ID'),
                                                     
                                    
                          ),
      
              'thankyou_title' => array(
      
        'name' => 'thankyou_title',
        'propertyName' => 'thankyouTitle',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('ThankYou Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                           'default' => 'NULL',
         
                          ),
      
              'thankyou_text' => array(
      
        'name' => 'thankyou_text',
        'propertyName' => 'thankyouText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('ThankYou Text'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'thankyou_footer_text' => array(
      
        'name' => 'thankyou_footer_text',
        'propertyName' => 'thankyouFooterText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Footer Text'),
                                 'maxlength' => 65535,
                                  'rows' => 6,
                         'cols' => 50,
         
                                    
                          ),
      
              'is_pay_later' => array(
      
        'name' => 'is_pay_later',
        'propertyName' => 'isPayLater',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Pay Later Allowed'),
                                                     
                                    
                          ),
      
              'pay_later_text' => array(
      
        'name' => 'pay_later_text',
        'propertyName' => 'payLaterText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Pay Later Text'),
                                 'maxlength' => 65535,
                                    
                                    
                          ),
      
              'pay_later_receipt' => array(
      
        'name' => 'pay_later_receipt',
        'propertyName' => 'payLaterReceipt',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Pay Later Receipt Text'),
                                 'maxlength' => 65535,
                                    
                                    
                          ),
      
              'is_partial_payment' => array(
      
        'name' => 'is_partial_payment',
        'propertyName' => 'isPartialPayment',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Partial Payments Enabled'),
                                                     
                                    
                          ),
      
              'initial_amount_label' => array(
      
        'name' => 'initial_amount_label',
        'propertyName' => 'initialAmountLabel',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Initial Amount Label'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'initial_amount_help_text' => array(
      
        'name' => 'initial_amount_help_text',
        'propertyName' => 'initialAmountHelpText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Initial Amount Help Text'),
                                 'maxlength' => 65535,
                                    
                                    
                          ),
      
              'min_initial_amount' => array(
      
        'name' => 'min_initial_amount',
        'propertyName' => 'minInitialAmount',
        'type' => CRM_Utils_Type::T_MONEY,
                'title' => ts('Minimum Initial Amount'),
                                                     
                                    
                          ),
      
              'is_multiple_registrations' => array(
      
        'name' => 'is_multiple_registrations',
        'propertyName' => 'isMultipleRegistrations',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Allow Multiple Registrations'),
                                                     
                                    
                          ),
      
              'allow_same_participant_emails' => array(
      
        'name' => 'allow_same_participant_emails',
        'propertyName' => 'allowSameParticipantEmails',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Does Event allow multiple registrations from same email address?'),
                                                     
                                    
                          ),
      
              'has_waitlist' => array(
      
        'name' => 'has_waitlist',
        'propertyName' => 'hasWaitlist',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Waitlist Enabled'),
                                                     
                                    
                          ),
      
              'requires_approval' => array(
      
        'name' => 'requires_approval',
        'propertyName' => 'requiresApproval',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Requires Approval'),
                                                     
                                    
                          ),
      
              'expiration_time' => array(
      
        'name' => 'expiration_time',
        'propertyName' => 'expirationTime',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Expiration Time'),
                                                     
                                    
                          ),
      
              'waitlist_text' => array(
      
        'name' => 'waitlist_text',
        'propertyName' => 'waitlistText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Waitlist Text'),
                                 'maxlength' => 65535,
                                  'rows' => 4,
                         'cols' => 60,
         
                                    
                          ),
      
              'approval_req_text' => array(
      
        'name' => 'approval_req_text',
        'propertyName' => 'approvalReqText',
        'type' => CRM_Utils_Type::T_TEXT,
                'title' => ts('Approval Req Text'),
                                 'maxlength' => 65535,
                                  'rows' => 4,
                         'cols' => 60,
         
                                    
                          ),
      
              'is_template' => array(
      
        'name' => 'is_template',
        'propertyName' => 'isTemplate',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is an Event Template'),
                                                     
                                    
                          ),
      
              'template_title' => array(
      
        'name' => 'template_title',
        'propertyName' => 'templateTitle',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Event Template Title'),
                                 'maxlength' => 255,
                         'size' => CRM_Utils_Type::HUGE,
                           
                'import' => true,
        'where' => 'civicrm_event.template_title',
        'headerPattern' => '/(template.)?title$/i',
        'dataPattern' => '',
                         'export' => true,
                                   
                          ),
      
              'created_id' => array(
      
        'name' => 'created_id',
        'propertyName' => 'created',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Created By Contact ID'),
                                                     
                                    
                'FKClassName' => 'CRM_Contact_Contact',
                          ),
      
              'created_date' => array(
      
        'name' => 'created_date',
        'propertyName' => 'createdDate',
        'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => ts('Event Created Date'),
                                                     
                                    
                          ),
      
              'currency' => array(
      
        'name' => 'currency',
        'propertyName' => 'currency',
        'type' => CRM_Utils_Type::T_STRING,
                'title' => ts('Currency'),
                                 'maxlength' => 3,
                         'size' => CRM_Utils_Type::FOUR,
                           
                'import' => true,
        'where' => 'civicrm_event.currency',
        'headerPattern' => '/cur(rency)?/i',
        'dataPattern' => '/^[A-Z]{3}$/i',
                         'export' => true,
                                   
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_currency',
                      'keyColumn' => 'name',
                      'labelColumn' => 'full_name',
                      'nameColumn' => 'numeric_code',
                    )
                 ),
      
              'campaign_id' => array(
      
        'name' => 'campaign_id',
        'propertyName' => 'campaign',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Campaign'),
                                                     
                                    
                'FKClassName' => 'CRM_Campaign_Campaign',
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_campaign',
                      'keyColumn' => 'id',
                      'labelColumn' => 'title',
                    )
                 ),
      
              'is_share' => array(
      
        'name' => 'is_share',
        'propertyName' => 'isShare',
        'type' => CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is shared through social media'),
                                                     
                                           'default' => '1',
         
                          ),
      
              'parent_event_id' => array(
      
        'name' => 'parent_event_id',
        'propertyName' => 'parentEventId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Parent Event ID'),
                                                     
                                           'default' => 'NULL',
         
                          ),
      
              'slot_label_id' => array(
      
        'name' => 'slot_label_id',
        'propertyName' => 'slotLabelId',
        'type' => CRM_Utils_Type::T_INT,
                'title' => ts('Subevent Slot Label ID'),
                                                     
                                           'default' => 'NULL',
         
                          ),
             );
    }
    return self::$_fields;
  }

}

