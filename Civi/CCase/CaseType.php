<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Case/CaseType.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\CCase;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use Civi\Core\Annotations\Field as Field;
use JMS\Serializer\Annotation as JMS;

/**
 * CaseType
 *
 * @CiviAPI\Entity("CaseType")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_case_type", uniqueConstraints={@ORM\UniqueConstraint(name="case_type_name", columns={"name"})})
 * @ORM\Entity
 *
 */
class CaseType extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="name", type="string", length=64, nullable=false)
   * 
   */
  private $name;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="title", type="string", length=64, nullable=false)
   * @Field(localizable=true)
   * 
   */
  private $title;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="description", type="string", length=255, nullable=true)
   * @Field(localizable=true)
   * 
   */
  private $description;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_active", type="boolean", nullable=true)
   * 
   */
  private $isActive;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_reserved", type="boolean", nullable=true)
   * 
   */
  private $isReserved;
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="weight", type="integer", nullable=false, options={"unsigned":true, "default": 1})
   * 
   */
  private $weight = '1';
  
  /**
   * @var blob
   *
   * @JMS\Type("blob")
   * @ORM\Column(name="definition", type="blob", nullable=true)
   * 
   */
  private $definition;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set name
   *
   * @param string $name
   * @return CaseType
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set title
   *
   * @param string $title
   * @return CaseType
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }

  /**
   * Get title
   *
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }
  
  /**
   * Set description
   *
   * @param string $description
   * @return CaseType
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return string
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return CaseType
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set isReserved
   *
   * @param boolean $isReserved
   * @return CaseType
   */
  public function setIsReserved($isReserved) {
    $this->isReserved = $isReserved;
    return $this;
  }

  /**
   * Get isReserved
   *
   * @return boolean
   */
  public function getIsReserved() {
    return $this->isReserved;
  }
  
  /**
   * Set weight
   *
   * @param integer $weight
   * @return CaseType
   */
  public function setWeight($weight) {
    $this->weight = $weight;
    return $this;
  }

  /**
   * Get weight
   *
   * @return integer
   */
  public function getWeight() {
    return $this->weight;
  }
  
  /**
   * Set definition
   *
   * @param blob $definition
   * @return CaseType
   */
  public function setDefinition($definition) {
    $this->definition = $definition;
    return $this;
  }

  /**
   * Get definition
   *
   * @return blob
   */
  public function getDefinition() {
    return $this->definition;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
        'id' => array(
          'name' => 'id',
          'propertyName' => 'id',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Case Type ID'),
          'required' => true,
        ),
        'name' => array(
          'name' => 'name',
          'propertyName' => 'name',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Case Type Name'),
          'required' => true,
          'maxlength' => 64,
          'size' => \CRM_Utils_Type::BIG,
        ),
        'title' => array(
          'name' => 'title',
          'propertyName' => 'title',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Case Type Title'),
          'required' => true,
          'maxlength' => 64,
          'size' => \CRM_Utils_Type::BIG,
          'localizable' => true,
        ),
        'description' => array(
          'name' => 'description',
          'propertyName' => 'description',
          'type' => \CRM_Utils_Type::T_STRING,
          'title' => ts('Case Type Description'),
          'maxlength' => 255,
          'size' => \CRM_Utils_Type::HUGE,
          'localizable' => true,
        ),
        'is_active' => array(
          'name' => 'is_active',
          'propertyName' => 'isActive',
          'type' => \CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Case Type Is Active'),
        ),
        'is_reserved' => array(
          'name' => 'is_reserved',
          'propertyName' => 'isReserved',
          'type' => \CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Case Type Is Reserved'),
        ),
        'weight' => array(
          'name' => 'weight',
          'propertyName' => 'weight',
          'type' => \CRM_Utils_Type::T_INT,
          'title' => ts('Case Type Weight'),
          'required' => true,
          'default' => '1',
        ),
        'definition' => array(
          'name' => 'definition',
          'propertyName' => 'definition',
          'type' => \CRM_Utils_Type::T_BLOB,
          'title' => ts('Case Type Definition'),
        ),
      );
     }
    return self::$_fields;
  }

  static function getDynamicReferenceColumns($tableName) {
    $dynamic_reference_columns = array();
    return $dynamic_reference_columns;
  }
}