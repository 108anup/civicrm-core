<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2013                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2013
 *
 * Generated from xml/schema/CRM/Contribute/Product.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */

namespace Civi\Contribute;

require_once 'Civi/Core/Entity.php';

use Doctrine\ORM\Mapping as ORM;
use Civi\API\Annotation as CiviAPI;
use JMS\Serializer\Annotation as JMS;

/**
 * Product
 *
 * @CiviAPI\Entity("Product")
 * @CiviAPI\Permission()
 * @ORM\Table(name="civicrm_product", indexes={@ORM\Index(name="FK_civicrm_product_financial_type_id", columns={"financial_type_id"})})
 * @ORM\Entity
 *
 */
class Product extends \Civi\Core\Entity {

  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned":true} )
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="IDENTITY")
   */
  private $id;
    
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="name", type="string", length=255, nullable=false)
   * 
   */
  private $name;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="description", type="text", length=65535, nullable=true)
   * 
   */
  private $description;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="sku", type="string", length=50, nullable=true)
   * 
   */
  private $sku;
  
  /**
   * @var text
   *
   * @JMS\Type("text")
   * @ORM\Column(name="options", type="text", length=65535, nullable=true)
   * 
   */
  private $options;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="image", type="string", length=255, nullable=true)
   * 
   */
  private $image;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="thumbnail", type="string", length=255, nullable=true)
   * 
   */
  private $thumbnail;
  
  /**
   * @var float
   *
   * @JMS\Type("float")
   * @ORM\Column(name="price", type="float", nullable=true)
   * 
   */
  private $price;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="currency", type="string", length=3, nullable=true)
   * 
   */
  private $currency = 'NULL';
  
  /**
   * @var \Civi\Financial\FinancialType
   *
   * 
   * @ORM\ManyToOne(targetEntity="Civi\Financial\FinancialType")
   * @ORM\JoinColumns({@ORM\JoinColumn(name="financial_type_id", referencedColumnName="id", onDelete="SET NULL")})
   */
  private $financialType = 'NULL';
  
  /**
   * @var float
   *
   * @JMS\Type("float")
   * @ORM\Column(name="min_contribution", type="float", nullable=true)
   * 
   */
  private $minContribution;
  
  /**
   * @var float
   *
   * @JMS\Type("float")
   * @ORM\Column(name="cost", type="float", nullable=true)
   * 
   */
  private $cost;
  
  /**
   * @var boolean
   *
   * @JMS\Type("boolean")
   * @ORM\Column(name="is_active", type="boolean", nullable=false)
   * 
   */
  private $isActive;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="period_type", type="string", length=8, nullable=true, options={"default": "rolling"})
   * 
   */
  private $periodType = 'rolling';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="fixed_period_start_day", type="integer", nullable=true, options={"unsigned":true, "default": 0101})
   * 
   */
  private $fixedPeriodStartDay = '0101';
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="duration_unit", type="string", length=8, nullable=true, options={"default": "year"})
   * 
   */
  private $durationUnit = 'year';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="duration_interval", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $durationInterval;
  
  /**
   * @var string
   *
   * @JMS\Type("string")
   * @ORM\Column(name="frequency_unit", type="string", length=8, nullable=true, options={"default": "month"})
   * 
   */
  private $frequencyUnit = 'month';
  
  /**
   * @var integer
   *
   * @JMS\Type("integer")
   * @ORM\Column(name="frequency_interval", type="integer", nullable=true, options={"unsigned":true})
   * 
   */
  private $frequencyInterval;

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }
    
  /**
   * Set name
   *
   * @param string $name
   * @return Product
   */
  public function setName($name) {
    $this->name = $name;
    return $this;
  }

  /**
   * Get name
   *
   * @return string
   */
  public function getName() {
    return $this->name;
  }
  
  /**
   * Set description
   *
   * @param text $description
   * @return Product
   */
  public function setDescription($description) {
    $this->description = $description;
    return $this;
  }

  /**
   * Get description
   *
   * @return text
   */
  public function getDescription() {
    return $this->description;
  }
  
  /**
   * Set sku
   *
   * @param string $sku
   * @return Product
   */
  public function setSku($sku) {
    $this->sku = $sku;
    return $this;
  }

  /**
   * Get sku
   *
   * @return string
   */
  public function getSku() {
    return $this->sku;
  }
  
  /**
   * Set options
   *
   * @param text $options
   * @return Product
   */
  public function setOptions($options) {
    $this->options = $options;
    return $this;
  }

  /**
   * Get options
   *
   * @return text
   */
  public function getOptions() {
    return $this->options;
  }
  
  /**
   * Set image
   *
   * @param string $image
   * @return Product
   */
  public function setImage($image) {
    $this->image = $image;
    return $this;
  }

  /**
   * Get image
   *
   * @return string
   */
  public function getImage() {
    return $this->image;
  }
  
  /**
   * Set thumbnail
   *
   * @param string $thumbnail
   * @return Product
   */
  public function setThumbnail($thumbnail) {
    $this->thumbnail = $thumbnail;
    return $this;
  }

  /**
   * Get thumbnail
   *
   * @return string
   */
  public function getThumbnail() {
    return $this->thumbnail;
  }
  
  /**
   * Set price
   *
   * @param float $price
   * @return Product
   */
  public function setPrice($price) {
    $this->price = $price;
    return $this;
  }

  /**
   * Get price
   *
   * @return float
   */
  public function getPrice() {
    return $this->price;
  }
  
  /**
   * Set currency
   *
   * @param string $currency
   * @return Product
   */
  public function setCurrency($currency) {
    $this->currency = $currency;
    return $this;
  }

  /**
   * Get currency
   *
   * @return string
   */
  public function getCurrency() {
    return $this->currency;
  }
  
  /**
   * Set financialType
   *
   * @param \Civi\Financial\FinancialType $financialType
   * @return Product
   */
  public function setFinancialType(\Civi\Financial\FinancialType $financialType = null) {
    $this->financialType = $financialType;
    return $this;
  }

  /**
   * Get financialType
   *
   * @return \Civi\Financial\FinancialType
   */
  public function getFinancialType() {
    return $this->financialType;
  }
  
  /**
   * Set minContribution
   *
   * @param float $minContribution
   * @return Product
   */
  public function setMinContribution($minContribution) {
    $this->minContribution = $minContribution;
    return $this;
  }

  /**
   * Get minContribution
   *
   * @return float
   */
  public function getMinContribution() {
    return $this->minContribution;
  }
  
  /**
   * Set cost
   *
   * @param float $cost
   * @return Product
   */
  public function setCost($cost) {
    $this->cost = $cost;
    return $this;
  }

  /**
   * Get cost
   *
   * @return float
   */
  public function getCost() {
    return $this->cost;
  }
  
  /**
   * Set isActive
   *
   * @param boolean $isActive
   * @return Product
   */
  public function setIsActive($isActive) {
    $this->isActive = $isActive;
    return $this;
  }

  /**
   * Get isActive
   *
   * @return boolean
   */
  public function getIsActive() {
    return $this->isActive;
  }
  
  /**
   * Set periodType
   *
   * @param string $periodType
   * @return Product
   */
  public function setPeriodType($periodType) {
    $this->periodType = $periodType;
    return $this;
  }

  /**
   * Get periodType
   *
   * @return string
   */
  public function getPeriodType() {
    return $this->periodType;
  }
  
  /**
   * Set fixedPeriodStartDay
   *
   * @param integer $fixedPeriodStartDay
   * @return Product
   */
  public function setFixedPeriodStartDay($fixedPeriodStartDay) {
    $this->fixedPeriodStartDay = $fixedPeriodStartDay;
    return $this;
  }

  /**
   * Get fixedPeriodStartDay
   *
   * @return integer
   */
  public function getFixedPeriodStartDay() {
    return $this->fixedPeriodStartDay;
  }
  
  /**
   * Set durationUnit
   *
   * @param string $durationUnit
   * @return Product
   */
  public function setDurationUnit($durationUnit) {
    $this->durationUnit = $durationUnit;
    return $this;
  }

  /**
   * Get durationUnit
   *
   * @return string
   */
  public function getDurationUnit() {
    return $this->durationUnit;
  }
  
  /**
   * Set durationInterval
   *
   * @param integer $durationInterval
   * @return Product
   */
  public function setDurationInterval($durationInterval) {
    $this->durationInterval = $durationInterval;
    return $this;
  }

  /**
   * Get durationInterval
   *
   * @return integer
   */
  public function getDurationInterval() {
    return $this->durationInterval;
  }
  
  /**
   * Set frequencyUnit
   *
   * @param string $frequencyUnit
   * @return Product
   */
  public function setFrequencyUnit($frequencyUnit) {
    $this->frequencyUnit = $frequencyUnit;
    return $this;
  }

  /**
   * Get frequencyUnit
   *
   * @return string
   */
  public function getFrequencyUnit() {
    return $this->frequencyUnit;
  }
  
  /**
   * Set frequencyInterval
   *
   * @param integer $frequencyInterval
   * @return Product
   */
  public function setFrequencyInterval($frequencyInterval) {
    $this->frequencyInterval = $frequencyInterval;
    return $this;
  }

  /**
   * Get frequencyInterval
   *
   * @return integer
   */
  public function getFrequencyInterval() {
    return $this->frequencyInterval;
  }

  /**
   * returns all the column names of this table
   *
   * @access public
   * @return array
   */
  public static $_fields = NULL;

  static function &fields( ) {
    if ( !self::$_fields) {
      self::$_fields = array (
      
              'id' => array(
      
        'name' => 'id',
        'propertyName' => 'id',
        'type' => \CRM_Utils_Type::T_INT,
                        'required' => true,
                                                     
                                    
                          ),
      
              'product_name' => array(
      
        'name' => 'name',
        'propertyName' => 'name',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Product Name'),
                        'required' => true,
                         'maxlength' => 255,
                                 'size' => \CRM_Utils_Type::HUGE,
                           
                         'export' => true,
                'where' => 'civicrm_product.name',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                          ),
      
              'description' => array(
      
        'name' => 'description',
        'propertyName' => 'description',
        'type' => \CRM_Utils_Type::T_TEXT,
                'title' => ts('Description'),
                                 'maxlength' => 65535,
                                            
                                    
                          ),
      
              'sku' => array(
      
        'name' => 'sku',
        'propertyName' => 'sku',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('SKU'),
                                 'maxlength' => 50,
                                 'size' => \CRM_Utils_Type::BIG,
                           
                         'export' => true,
                'where' => 'civicrm_product.sku',
        'headerPattern' => '',
        'dataPattern' => '',
                                   
                          ),
      
              'options' => array(
      
        'name' => 'options',
        'propertyName' => 'options',
        'type' => \CRM_Utils_Type::T_TEXT,
                'title' => ts('Options'),
                                 'maxlength' => 65535,
                                            
                                    
                          ),
      
              'image' => array(
      
        'name' => 'image',
        'propertyName' => 'image',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Image'),
                                 'maxlength' => 255,
                                 'size' => \CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'thumbnail' => array(
      
        'name' => 'thumbnail',
        'propertyName' => 'thumbnail',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Thumbnail'),
                                 'maxlength' => 255,
                                 'size' => \CRM_Utils_Type::HUGE,
                           
                                    
                          ),
      
              'price' => array(
      
        'name' => 'price',
        'propertyName' => 'price',
        'type' => \CRM_Utils_Type::T_MONEY,
                'title' => ts('Price'),
                                          'precision'      => array(20,2),
                                   
                                    
                          ),
      
              'currency' => array(
      
        'name' => 'currency',
        'propertyName' => 'currency',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Currency'),
                                 'maxlength' => 3,
                                 'size' => \CRM_Utils_Type::FOUR,
                           
                                           'default' => 'NULL',
         
                                     'pseudoconstant' => array(
                                'table' => 'civicrm_currency',
                      'keyColumn' => 'name',
                      'labelColumn' => 'full_name',
                      'nameColumn' => 'numeric_code',
                    )
                 ),
      
              'financial_type_id' => array(
      
        'name' => 'financial_type_id',
        'propertyName' => 'financialType',
        'type' => \CRM_Utils_Type::T_INT,
                'title' => ts('Financial Type'),
                                                             
                                           'default' => 'NULL',
         
                'FKClassName' => 'CRM_Financial_DAO_FinancialType',
                          ),
      
              'min_contribution' => array(
      
        'name' => 'min_contribution',
        'propertyName' => 'minContribution',
        'type' => \CRM_Utils_Type::T_MONEY,
                'title' => ts('Minimum Contribution'),
                                          'precision'      => array(20,2),
                                   
                                    
                          ),
      
              'cost' => array(
      
        'name' => 'cost',
        'propertyName' => 'cost',
        'type' => \CRM_Utils_Type::T_MONEY,
                'title' => ts('Cost'),
                                          'precision'      => array(20,2),
                                   
                                    
                          ),
      
              'is_active' => array(
      
        'name' => 'is_active',
        'propertyName' => 'isActive',
        'type' => \CRM_Utils_Type::T_BOOLEAN,
                'title' => ts('Is Active'),
                        'required' => true,
                                                     
                                    
                          ),
      
              'period_type' => array(
      
        'name' => 'period_type',
        'propertyName' => 'periodType',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Period Type'),
                                 'maxlength' => 8,
                                 'size' => \CRM_Utils_Type::EIGHT,
                           
                                           'default' => 'rolling',
         
                                     'pseudoconstant' => array(
                                'callback' => 'CRM_Core_SelectValues::periodType',
                    )
                 ),
      
              'fixed_period_start_day' => array(
      
        'name' => 'fixed_period_start_day',
        'propertyName' => 'fixedPeriodStartDay',
        'type' => \CRM_Utils_Type::T_INT,
                'title' => ts('Fixed Period Start Day'),
                                                             
                                           'default' => '0101',
         
                          ),
      
              'duration_unit' => array(
      
        'name' => 'duration_unit',
        'propertyName' => 'durationUnit',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Duration Unit'),
                                 'maxlength' => 8,
                                 'size' => \CRM_Utils_Type::EIGHT,
                           
                                           'default' => 'year',
         
                                     'pseudoconstant' => array(
                                'callback' => 'CRM_Core_SelectValues::getPremiumUnits',
                    )
                 ),
      
              'duration_interval' => array(
      
        'name' => 'duration_interval',
        'propertyName' => 'durationInterval',
        'type' => \CRM_Utils_Type::T_INT,
                'title' => ts('Duration Interval'),
                                                             
                                    
                          ),
      
              'frequency_unit' => array(
      
        'name' => 'frequency_unit',
        'propertyName' => 'frequencyUnit',
        'type' => \CRM_Utils_Type::T_STRING,
                'title' => ts('Frequency Unit'),
                                 'maxlength' => 8,
                                 'size' => \CRM_Utils_Type::EIGHT,
                           
                                           'default' => 'month',
         
                                     'pseudoconstant' => array(
                                'callback' => 'CRM_Core_SelectValues::getPremiumUnits',
                    )
                 ),
      
              'frequency_interval' => array(
      
        'name' => 'frequency_interval',
        'propertyName' => 'frequencyInterval',
        'type' => \CRM_Utils_Type::T_INT,
                'title' => ts('Frequency Interval'),
                                                             
                                    
                          ),
             );
    }
    return self::$_fields;
  }

}

